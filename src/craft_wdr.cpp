//------------------------------------------------------------------------------
// Source code generated by wxDesigner from file: craft.wdr
// Do not modify this file, all changes will be lost!
//------------------------------------------------------------------------------

#ifdef __GNUG__
    #pragma implementation "craft_wdr.h"
#endif

// For compilers that support precompilation
#include "wx/wxprec.h"

#ifdef __BORLANDC__
    #pragma hdrstop
#endif

// Include private header
#include "craft_wdr.h"


// Custom source
#include "hex_edit.h"
#include "NLog.h"
// --*-c++-*--
/*
 
    Crafty Packet Crafter
    Copyright (C) 2003  Jesse Lovelace <jllovela@ncsu.edu>
 
    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

// Implement window functions

wxSizer *IPv4( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 4 );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 3, 0, 0 );
    item1->AddGrowableCol( 1 );

    wxStaticText *item2 = new wxStaticText( parent, ID_TEXT, wxT("Dest IP"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item2, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item3 = new wxTextCtrl( parent, ID_IPV4_DEST, wxT("0.0.0.0"), wxDefaultPosition, wxSize(40,-1), 0 );
    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( 20, 20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TEXT, wxT("Source IP"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item4, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID_IPV4_SOURCE, wxT("0.0.0.0"), wxDefaultPosition, wxSize(60,-1), 0 );
    item1->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item6 = new wxCheckBox( parent, ID_IPV4_AUTO_SOURCE, wxT("Auto"), wxDefaultPosition, wxDefaultSize, 0 );
    item1->Add( item6, 0, wxALIGN_CENTER|wxALL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5 );

    wxFlexGridSizer *item7 = new wxFlexGridSizer( 2, 0, 0 );
    item7->AddGrowableCol( 1 );

    wxStaticBox *item9 = new wxStaticBox( parent, -1, wxT("Flags") );
    wxStaticBoxSizer *item8 = new wxStaticBoxSizer( item9, wxHORIZONTAL );

    wxCheckBox *item10 = new wxCheckBox( parent, ID_IPV4_FLAG_MF, wxT("May Frag"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->SetToolTip( wxT("IP packet must not be fragmented, if a router needs to fragment the packet and the DF bit is set it will discard the packet and (well at least well behaved routers will) send an ICMP \"fragmentation needed but DF set\" (ICMP type 3, code 4) error message to the sending station.") );
    item8->Add( item10, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item11 = new wxCheckBox( parent, ID_IPV4_FLAG_LF, wxT("Last Frag"), wxDefaultPosition, wxDefaultSize, 0 );
    item11->SetToolTip( wxT("If the MF bit is set this is an indication to the receiving host that this datagram being received is a fragment and that more fragments follow.") );
    item8->Add( item11, 0, wxALIGN_CENTER|wxALL, 5 );

    item7->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxStaticBox *item13 = new wxStaticBox( parent, -1, wxT("Protocol") );
    wxStaticBoxSizer *item12 = new wxStaticBoxSizer( item13, wxHORIZONTAL );

    wxString strs14[] = 
    {
        wxT("TCP"), 
        wxT("UDP"), 
        wxT("ICMP"), 
        wxT("IGMP"), 
        wxT("IPinIP"), 
        wxT("Other")
    };
    wxChoice *item14 = new wxChoice( parent, ID_IPV4_PROTOCOLS, wxDefaultPosition, wxSize(80,-1), 6, strs14, 0 );
    item12->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, ID_IPV4_PROTO_OTHER, wxT(""), wxDefaultPosition, wxSize(60,-1), 0 );
    item15->Enable( FALSE );
    item12->Add( item15, 0, wxALIGN_CENTER|wxALL, 5 );

    item7->Add( item12, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxFlexGridSizer *item16 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticBox *item18 = new wxStaticBox( parent, -1, wxT("Length") );
    wxStaticBoxSizer *item17 = new wxStaticBoxSizer( item18, wxHORIZONTAL );

    wxStaticText *item19 = new wxStaticText( parent, ID_IPV4_LENGTH_TXT, wxT("Actual (XX):"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item19, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item20 = new wxTextCtrl( parent, ID_IPV4_LENGTH, wxT("5"), wxDefaultPosition, wxSize(70,-1), wxTE_READONLY );
    item17->Add( item20, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item21 = new wxCheckBox( parent, ID_IPV4_OVERRIDE_LENGTH, wxT("Override"), wxDefaultPosition, wxDefaultSize, 0 );
    item17->Add( item21, 0, wxALIGN_CENTER|wxRIGHT|wxTOP|wxBOTTOM, 5 );

    item16->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxStaticBox *item23 = new wxStaticBox( parent, -1, wxT("Options") );
    wxStaticBoxSizer *item22 = new wxStaticBoxSizer( item23, wxHORIZONTAL );

    wxButton *item24 = new wxButton( parent, ID_IPV4_EDIT_OPTIONS, wxT("Edit"), wxDefaultPosition, wxDefaultSize, 0 );
    item22->Add( item24, 0, wxALIGN_CENTER|wxALL, 5 );

    item16->Add( item22, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item0->Add( item16, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    if (set_sizer)
    {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
        {
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}

wxSizer *Main( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 0 );

    wxFlexGridSizer *item1 = new wxFlexGridSizer( 2, 0, 0 );
    item1->AddGrowableCol( 0 );
    item1->AddGrowableRow( 0 );

    wxNotebook *item3 = new wxNotebook( parent, ID_NOTEBOOK, wxDefaultPosition, wxSize(220,160), wxNB_LEFT );
    wxNotebookSizer *item2 = new wxNotebookSizer( item3 );

    wxPanel *item4 = new wxPanel( item3, -1 );
    IPv4( item4, FALSE );
    item3->AddPage( item4, wxT("IPv4") );

    wxPanel *item5 = new wxPanel( item3, -1 );
    IPV4_TCP( item5, FALSE );
    item3->AddPage( item5, wxT("TCP") );

    wxPanel *item6 = new wxPanel( item3, -1 );
    Log( item6, FALSE );
    item3->AddPage( item6, wxT("Log") );

    item1->Add( item2, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxHexEditCtrl *item7 = new wxHexEditCtrl( parent, ID_IPV4_HEX, wxDefaultPosition, wxSize(250,60), wxHSCROLL|wxVSCROLL );
    item7->SetScrollbars( 10, 10, 20, 100, 0, 0 );
    item1->Add( item7, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxFlexGridSizer *item8 = new wxFlexGridSizer( 8, 0, 0 );

    wxButton *item9 = new wxButton( parent, ID_SEND_PACKET, wxT("Send"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item9, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxStaticText *item10 = new wxStaticText( parent, ID_TEXT, wxT("Count:"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item10, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxSpinCtrl *item11 = new wxSpinCtrl( parent, ID_SEND_COUNT, wxT("1"), wxDefaultPosition, wxSize(60,-1), 0, 1, 1000, 1 );
    item8->Add( item11, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxCheckBox *item12 = new wxCheckBox( parent, ID_SEND_INFINITE, wxT("Infinite"), wxDefaultPosition, wxDefaultSize, 0 );
    item12->SetToolTip( wxT("Continue sending packets until canceled.") );
    item8->Add( item12, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5 );

    wxStaticLine *item13 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(-1,20), wxLI_VERTICAL );
    item8->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, wxT("Interval (ms):"), wxDefaultPosition, wxDefaultSize, 0 );
    item8->Add( item14, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5 );

    wxSpinCtrl *item15 = new wxSpinCtrl( parent, ID_SEND_INTERVAL, wxT("0"), wxDefaultPosition, wxSize(60,-1), 0, 0, 100, 0 );
    item8->Add( item15, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    wxCheckBox *item16 = new wxCheckBox( parent, ID_SEND_INTERVAL_RANDOM, wxT("Random"), wxDefaultPosition, wxDefaultSize, 0 );
    item16->SetToolTip( wxT("Randomize interval with maximum specified to the left.") );
    item8->Add( item16, 0, wxALIGN_CENTER_VERTICAL|wxTOP|wxBOTTOM, 5 );

    item0->Add( item8, 0, wxALIGN_CENTER, 5 );

    if (set_sizer)
    {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
        {
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}

wxSizer *IPV4_TCP( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 5 );

    wxStaticBox *item2 = new wxStaticBox( parent, -1, wxT("Service") );
    wxStaticBoxSizer *item1 = new wxStaticBoxSizer( item2, wxVERTICAL );

    wxFlexGridSizer *item3 = new wxFlexGridSizer( 5, 0, 0 );
    item3->AddGrowableCol( 1 );
    item3->AddGrowableCol( 4 );

    wxStaticText *item4 = new wxStaticText( parent, ID_TCP_SOURCE_PORT, wxT("Source"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item4, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item5 = new wxTextCtrl( parent, ID_TCP_SOURCE, wxT("1025"), wxDefaultPosition, wxSize(80,-1), 0 );
    item3->Add( item5, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxStaticLine *item6 = new wxStaticLine( parent, ID_LINE, wxDefaultPosition, wxSize(-1,20), wxLI_VERTICAL );
    item3->Add( item6, 0, wxGROW|wxALIGN_CENTER_HORIZONTAL|wxALL, 5 );

    wxStaticText *item7 = new wxStaticText( parent, ID_TCP_DEST_PORT, wxT("Dest"), wxDefaultPosition, wxDefaultSize, 0 );
    item3->Add( item7, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item8 = new wxTextCtrl( parent, ID_TCP_DEST, wxT("1025"), wxDefaultPosition, wxSize(80,-1), 0 );
    item3->Add( item8, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    item1->Add( item3, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5 );

    wxFlexGridSizer *item9 = new wxFlexGridSizer( 2, 0, 0 );

    wxFlexGridSizer *item10 = new wxFlexGridSizer( 3, 0, 0 );

    wxStaticText *item11 = new wxStaticText( parent, ID_TEXT, wxT("Sequence"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item11, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item12 = new wxTextCtrl( parent, ID_TCP_SEQ, wxT("0"), wxDefaultPosition, wxSize(60,-1), 0 );
    item10->Add( item12, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item13 = new wxCheckBox( parent, ID_TCP_SEQ_RANDOM, wxT("Randomize"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item13, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item14 = new wxStaticText( parent, ID_TEXT, wxT("Acknowledgement"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item14, 0, wxALIGN_CENTER|wxALL, 5 );

    wxTextCtrl *item15 = new wxTextCtrl( parent, ID_TCP_ACK, wxT("0"), wxDefaultPosition, wxSize(60,-1), 0 );
    item10->Add( item15, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxCheckBox *item16 = new wxCheckBox( parent, ID_TCP_ACK_RANDOM, wxT("Randomize"), wxDefaultPosition, wxDefaultSize, 0 );
    item10->Add( item16, 0, wxALIGN_CENTER|wxALL, 5 );

    item9->Add( item10, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5 );

    wxStaticBox *item18 = new wxStaticBox( parent, -1, wxT("Reserved") );
    wxStaticBoxSizer *item17 = new wxStaticBoxSizer( item18, wxVERTICAL );

    wxFlexGridSizer *item19 = new wxFlexGridSizer( 3, 0, 0 );

    wxCheckBox *item20 = new wxCheckBox( parent, ID_TCP_R1, wxT("1"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item20, 0, wxALIGN_CENTER|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxCheckBox *item21 = new wxCheckBox( parent, ID_TCP_R2, wxT("2"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item21, 0, wxALIGN_CENTER|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxCheckBox *item22 = new wxCheckBox( parent, ID_TCP_R3, wxT("3"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item22, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item23 = new wxCheckBox( parent, ID_TCP_R4, wxT("4"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item23, 0, wxALIGN_CENTER|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxCheckBox *item24 = new wxCheckBox( parent, ID_TCP_R5, wxT("5"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item24, 0, wxALIGN_CENTER|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxCheckBox *item25 = new wxCheckBox( parent, ID_TCP_R6, wxT("6"), wxDefaultPosition, wxDefaultSize, 0 );
    item19->Add( item25, 0, wxALIGN_CENTER|wxALL, 5 );

    item17->Add( item19, 0, wxALIGN_CENTER, 5 );

    item9->Add( item17, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5 );

    item0->Add( item9, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxFlexGridSizer *item26 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticBox *item28 = new wxStaticBox( parent, -1, wxT("Header Length") );
    wxStaticBoxSizer *item27 = new wxStaticBoxSizer( item28, wxHORIZONTAL );

    wxStaticText *item29 = new wxStaticText( parent, ID_TCP_HDR_LEN_TEXT, wxT("Actual (XX):"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item29, 0, wxALIGN_CENTER|wxLEFT|wxTOP|wxBOTTOM, 5 );

    wxTextCtrl *item30 = new wxTextCtrl( parent, ID_TCP_HDR_LEN, wxT("5"), wxDefaultPosition, wxSize(80,-1), wxTE_READONLY );
    item30->Enable( FALSE );
    item27->Add( item30, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item31 = new wxCheckBox( parent, ID_TCP_HDR_LEN_OVERRIDE, wxT("Override"), wxDefaultPosition, wxDefaultSize, 0 );
    item27->Add( item31, 0, wxALIGN_CENTER|wxLEFT|wxTOP|wxBOTTOM, 5 );

    item26->Add( item27, 0, wxALIGN_CENTER_VERTICAL|wxLEFT|wxBOTTOM, 5 );

    wxFlexGridSizer *item32 = new wxFlexGridSizer( 2, 0, 0 );

    wxStaticText *item33 = new wxStaticText( parent, ID_TEXT, wxT("Window size"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item33, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item34 = new wxTextCtrl( parent, ID_TCP_WINDOW_SIZE, wxT("0"), wxDefaultPosition, wxSize(80,-1), 0 );
    item32->Add( item34, 0, wxALIGN_CENTER|wxALL, 5 );

    wxStaticText *item35 = new wxStaticText( parent, ID_TEXT, wxT("Urgent pointer"), wxDefaultPosition, wxDefaultSize, 0 );
    item32->Add( item35, 0, wxALIGN_RIGHT|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    wxTextCtrl *item36 = new wxTextCtrl( parent, ID_TCP_URG_PTR, wxT("0"), wxDefaultPosition, wxSize(80,-1), 0 );
    item32->Add( item36, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxBOTTOM, 5 );

    item26->Add( item32, 0, 0, 5 );

    item0->Add( item26, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    wxFlexGridSizer *item37 = new wxFlexGridSizer( 3, 0, 0 );

    wxStaticBox *item39 = new wxStaticBox( parent, -1, wxT("Flags") );
    wxStaticBoxSizer *item38 = new wxStaticBoxSizer( item39, wxVERTICAL );

    wxFlexGridSizer *item40 = new wxFlexGridSizer( 3, 0, 0 );

    wxCheckBox *item41 = new wxCheckBox( parent, ID_TCP_FLAG_URG, wxT("URG"), wxDefaultPosition, wxDefaultSize, 0 );
    item40->Add( item41, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item42 = new wxCheckBox( parent, ID_TCP_FLAG_ACK, wxT("ACK"), wxDefaultPosition, wxDefaultSize, 0 );
    item40->Add( item42, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item43 = new wxCheckBox( parent, ID_TCP_FLAG_PSH, wxT("PSH"), wxDefaultPosition, wxDefaultSize, 0 );
    item40->Add( item43, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item44 = new wxCheckBox( parent, ID_TCP_FLAG_RST, wxT("RST"), wxDefaultPosition, wxDefaultSize, 0 );
    item40->Add( item44, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item45 = new wxCheckBox( parent, ID_TCP_FLAG_SYN, wxT("SYN"), wxDefaultPosition, wxDefaultSize, 0 );
    item40->Add( item45, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item46 = new wxCheckBox( parent, ID_TCP_FLAG_FIN, wxT("FIN"), wxDefaultPosition, wxDefaultSize, 0 );
    item40->Add( item46, 0, wxALIGN_CENTER|wxALL, 5 );

    item38->Add( item40, 0, wxALIGN_CENTER, 5 );

    item37->Add( item38, 0, wxALIGN_CENTER_VERTICAL|wxLEFT, 5 );

    wxStaticBox *item48 = new wxStaticBox( parent, -1, wxT("Options") );
    wxStaticBoxSizer *item47 = new wxStaticBoxSizer( item48, wxHORIZONTAL );

    wxButton *item49 = new wxButton( parent, ID_TCP_OPTIONS_EDIT, wxT("Edit"), wxDefaultPosition, wxDefaultSize, 0 );
    item47->Add( item49, 0, wxALIGN_CENTER|wxTOP|wxBOTTOM, 5 );

    item37->Add( item47, 0, wxALIGN_CENTER_HORIZONTAL|wxLEFT, 5 );

    wxStaticBox *item51 = new wxStaticBox( parent, -1, wxT("Checksum") );
    wxStaticBoxSizer *item50 = new wxStaticBoxSizer( item51, wxVERTICAL );

    wxTextCtrl *item52 = new wxTextCtrl( parent, ID_TCP_CHECKSUM, wxT("0"), wxDefaultPosition, wxSize(80,-1), 0 );
    item52->Enable( FALSE );
    item50->Add( item52, 0, wxALIGN_CENTER|wxALL, 5 );

    wxCheckBox *item53 = new wxCheckBox( parent, ID_TCP_CHECKSUM_OVERRIDE, wxT("Override"), wxDefaultPosition, wxDefaultSize, 0 );
    item50->Add( item53, 0, wxALIGN_CENTER|wxLEFT|wxRIGHT|wxTOP, 5 );

    item37->Add( item50, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT, 5 );

    item0->Add( item37, 0, wxGROW|wxALIGN_CENTER_VERTICAL, 5 );

    if (set_sizer)
    {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
        {
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}

wxSizer *Log( wxWindow *parent, bool call_fit, bool set_sizer )
{
    wxFlexGridSizer *item0 = new wxFlexGridSizer( 1, 0, 0 );
    item0->AddGrowableCol( 0 );
    item0->AddGrowableRow( 0 );

    guiLog *item1 = new guiLog( parent, ID_LIST_LOG, wxDefaultPosition, wxSize(160,120), wxLC_REPORT|wxSUNKEN_BORDER );
    item0->Add( item1, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5 );

    if (set_sizer)
    {
        parent->SetAutoLayout( TRUE );
        parent->SetSizer( item0 );
        if (call_fit)
        {
            item0->Fit( parent );
            item0->SetSizeHints( parent );
        }
    }
    
    return item0;
}

// Implement menubar functions

// Implement toolbar functions

// Implement bitmap functions


// End of generated file
